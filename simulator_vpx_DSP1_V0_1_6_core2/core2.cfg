/*
 * helloWorld.cfg
 *
 * Memory Map and Program intiializations for the helloWorld example Utility
 *
 * Copyright (C) 2010-2011 Texas Instruments Incorporated - http://www.ti.com/ 
 *  
 *  Redistribution and use in source and binary forms, with or without 
 *  modification, are permitted provided that the following conditions 
 *  are met:
 *
 *    Redistributions of source code must retain the above copyright 
 *    notice, this list of conditions and the following disclaimer.
 *
 *    Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the 
 *    documentation and/or other materials provided with the   
 *    distribution.
 *
 *    Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
 *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT 
 *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 *  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT 
 *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
 *  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT 
 *  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
 *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
 *  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
*/

/*
 *   @file  helloWorld.cfg
 *
 *   @brief   
 *      Memory Map and Program intiializations for the HPDSP Utility.
 *
 */
 
/********************************************************************************************************************
*  Specify all needed RTSC MOudles and ocnfigure them.																*
********************************************************************************************************************/
var BIOS = xdc.useModule('ti.sysbios.BIOS');
var Task = xdc.useModule('ti.sysbios.knl.Task');
var Memory  =   xdc.useModule('xdc.runtime.Memory');
var Log     =   xdc.useModule('xdc.runtime.Log');

var task0Params = new Task.Params();
task0Params.instance.name = "MainThreadHandle";
Program.global.MainThreadHandle = Task.create("&MainThread", task0Params);


var HeapMem = xdc.useModule('ti.sysbios.heaps.HeapMem');
/* Create a default system heap using ti.bios.HeapMem. */
var heapMemParams1         = new HeapMem.Params;
heapMemParams1.size        = 32768;
heapMemParams1.sectionName = "systemHeap";
Program.global.heap0       = HeapMem.create(heapMemParams1);

/* This is the default memory heap. */
Memory.defaultHeapInstance = Program.global.heap0;

Program.sectMap["systemHeap"] = Program.platform.stackMemory;


//++++ edit by LRH ++++
//-------------IPC-------------------------------------------------------------
var MultiProc = xdc.useModule('ti.sdo.utils.MultiProc');

/*
 *  Get the list of names that the build device supports.
 *  I.e. ["CORE0", "CORE1", "CORE2" ... ]
 */
var nameList = MultiProc.getDeviceProcNames();

/* 
 *  Since this is a single-image example, we don't (at build-time) which 
 *  processor we're building for.  We therefore supply 'null' 
 *  as the local procName and allow IPC to set the local procId at runtime.
 */
MultiProc.setConfig(null, nameList);

var MessageQ    = xdc.useModule('ti.sdo.ipc.MessageQ');
var Ipc         = xdc.useModule('ti.sdo.ipc.Ipc');
var HeapBufMP   = xdc.useModule('ti.sdo.ipc.heaps.HeapBufMP');
var MultiProc   = xdc.useModule('ti.sdo.utils.MultiProc');
var Notify      = xdc.useModule('ti.sdo.ipc.Notify');

var System   = xdc.useModule('xdc.runtime.System');
var SysStd   = xdc.useModule('xdc.runtime.SysStd');
System.SupportProxy = SysStd;
var SysMin   = xdc.useModule('xdc.runtime.SysMin');

/* Synchronize all processors (this will be done in Ipc_start) */
//Ipc.procSync = Ipc.ProcSync_ALL;
Ipc.procSync = Ipc.ProcSync_PAIR;	// Ipc_start does not Ipc_attach


var SharedRegion = xdc.useModule('ti.sdo.ipc.SharedRegion');

/* 
 *  Need to define the shared region. The IPC modules use this
 *  to make portable pointers. All processors need to add this
 *  call with their base address of the shared memory region.
 *  If the processor cannot access the memory, do not add it.
 */ 

/* Region 0 
*  For CORE1 receive message from CORE0 and CORE2~6 
*  Also used for synchonizing the processors, creating the default GateMP, 
*  and creating Notify and MessageQ transport instances	
*/
//0x0C000000 is the start of MSM, size is 2M
var SHAREDMEM_0           = 0x0C000000;
var SHAREDMEMSIZE_0       = 0x00200000;

SharedRegion.setEntryMeta(0,
    { base: SHAREDMEM_0, 
      len:  SHAREDMEMSIZE_0,
      ownerProcId: 1,
      isValid: true,
      name: "DDR2 RAM haha",
    });


/* Region 1
*  ¥Ê¥¢…¢…‰µ„–≈œ¢
*/    
var SHAREDMEM_1           = 0x0C200000;	//From the end of Region0
var SHAREDMEMSIZE_1       = 0x00004400;	//17K

 SharedRegion.setEntryMeta(1,
{ base: SHAREDMEM_1, 
  len:  SHAREDMEMSIZE_1,
  ownerProcId: 1,
  isValid: true,
  name: "DDR2 RAM",
});  
