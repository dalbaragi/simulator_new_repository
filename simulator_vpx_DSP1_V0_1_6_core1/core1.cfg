/*
 *  Copyright 2009 by Texas Instruments Incorporated.
 *
 *  All rights reserved. Property of Texas Instruments Incorporated.
 *  Restricted rights to use, duplicate or disclose this code are
 *  granted through contract.
 *
 */

/* THIS FILE WAS GENERATED BY ti.sysbios.genx */

/*
 *  ======== loopbackDioIsr.cfg ========
 *
 */
 
environment['xdc.cfg.check.fatal'] = 'false';

/* Load and use the various BIOS modules. */
var Memory  = xdc.useModule('xdc.runtime.Memory');
var BIOS    = xdc.useModule('ti.sysbios.BIOS');
var HWI     = xdc.useModule('ti.sysbios.family.c64p.Hwi');
var CPINTC  = xdc.useModule('ti.sysbios.family.c66.tci66xx.CpIntc');
var ECM     = xdc.useModule('ti.sysbios.family.c64p.EventCombiner');
var HeapMem = xdc.useModule('ti.sysbios.heaps.HeapMem');
var HeapBuf = xdc.useModule('ti.sysbios.heaps.HeapBuf');
var SEM     = xdc.useModule('ti.sysbios.knl.Semaphore');
var Task    = xdc.useModule('ti.sysbios.knl.Task');
var Idle    = xdc.useModule('ti.sysbios.knl.Idle');
var Log     = xdc.useModule('xdc.runtime.Log');
var Diags   = xdc.useModule('xdc.runtime.Diags');


/* Create a default system heap using ti.bios.HeapMem. */
var heapMemParams1         = new HeapMem.Params;
heapMemParams1.size        = 32768;
heapMemParams1.sectionName = "systemHeap";
Program.global.heap0       = HeapMem.create(heapMemParams1);

/* This is the default memory heap. */
Memory.defaultHeapInstance = Program.global.heap0;

Program.sectMap["systemHeap"] = Program.platform.stackMemory;

 

/* Load and use the CSL, CPPI, QMSS and SRIO packages */
var cslSettings = xdc.useModule ('ti.csl.Settings');
var Cppi = xdc.loadPackage('ti.drv.cppi'); 
var Qmss = xdc.loadPackage('ti.drv.qmss');  
var Srio = xdc.loadPackage('ti.drv.srio'); 

/* Load and use the System Package */
var System = xdc.useModule('xdc.runtime.System');
SysStd  = xdc.useModule('xdc.runtime.SysStd');
System.SupportProxy = SysStd;

/*
 * Enable Event Groups here and registering of ISR for specific GEM INTC is done
 * using EventCombiner_dispatchPlug() and Hwi_eventMap() APIs
 */
ECM.eventGroupHwiNum[0] = 7;
ECM.eventGroupHwiNum[1] = 8;
ECM.eventGroupHwiNum[2] = 9;
ECM.eventGroupHwiNum[3] = 10;


Program.sectMap[".cppi"] 			= 	"MSMCSRAM";
Program.sectMap[".qmss"] 			= 	"MSMCSRAM";
//Program.sectMap[".srioSharedMem"] 	= 	"MSMCSRAM";
Program.sectMap[".init_array"] 		= 	"L2SRAM";

var task0Params = new Task.Params();
task0Params.instance.name = "MainThreadHandle";
Program.global.MainThreadHandle = Task.create("&MainThread", task0Params);

/* Semaphore for QMSS config ready */
var sem0Params = new SEM.Params();
sem0Params.instance.name = "QmssRdySemHandle";
sem0Params.mode = SEM.Mode_BINARY;
Program.global.QmssRdySemHandle = SEM.create(null, sem0Params);

/* Manual mode message is ready */
var sem1Params = new SEM.Params();
sem1Params.instance.name = "ManualMsgRdyHandle";
sem1Params.mode = SEM.Mode_BINARY;
Program.global.ManualMsgRdyHandle = SEM.create(null, sem1Params);

/*
 *  @(#) ti.sysbios.genx; 2, 0, 0, 0,275; 4-29-2009 15:45:06; /db/vtree/library/trees/avala/avala-k25x/src/
 */


//-------------IPC-------------------------------------------------------------
var MultiProc = xdc.useModule('ti.sdo.utils.MultiProc');

/*
 *  Get the list of names that the build device supports.
 *  I.e. ["CORE0", "CORE1", "CORE2" ... ]
 */
var nameList = MultiProc.getDeviceProcNames();

/* 
 *  Since this is a single-image example, we don't (at build-time) which 
 *  processor we're building for.  We therefore supply 'null' 
 *  as the local procName and allow IPC to set the local procId at runtime.
 */
MultiProc.setConfig(null, nameList);

var MessageQ    = xdc.useModule('ti.sdo.ipc.MessageQ');

var Ipc         = xdc.useModule('ti.sdo.ipc.Ipc');
var HeapBufMP   = xdc.useModule('ti.sdo.ipc.heaps.HeapBufMP');
//var MultiProc   = xdc.useModule('ti.sdo.utils.MultiProc');
var Notify    = xdc.useModule('ti.sdo.ipc.Notify');

var System   = xdc.useModule('xdc.runtime.System');
var SysStd   = xdc.useModule('xdc.runtime.SysStd');
System.SupportProxy = SysStd;
var SysMin   = xdc.useModule('xdc.runtime.SysMin');

/* Synchronize all processors (this will be done in Ipc_start) */
//Ipc.procSync = Ipc.ProcSync_ALL;
Ipc.procSync = Ipc.ProcSync_PAIR;	// Ipc_start does not Ipc_attach

var SharedRegion = xdc.useModule('ti.sdo.ipc.SharedRegion');

/* 
 *  Need to define the shared region. The IPC modules use this
 *  to make portable pointers. All processors need to add this
 *  call with their base address of the shared memory region.
 *  If the processor cannot access the memory, do not add it.
 */ 

/* Region 0 
*  For CORE1 receive message from CORE0 and CORE2~6 
*  Also used for synchonizing the processors, creating the default GateMP, 
*  and creating Notify and MessageQ transport instances	
*/
//0x0C000000 is the start of MSM, size is 2M
//var SHAREDMEM_1           = 0x0C100000;
//var SHAREDMEMSIZE_1       = 0x00100000;
//
//SharedRegion.setEntryMeta(1,
//    { base: SHAREDMEM_0, 
//      len:  SHAREDMEMSIZE_0,
//      ownerProcId: 1,
//      isValid: true,
//      name: "DDR2 RAM haha",
//    });
    
/* Region 0 
*  For CORE1 receive message from CORE0 and CORE2~6 
*  Also used for synchonizing the processors, creating the default GateMP, 
*  and creating Notify and MessageQ transport instances	
*/
//0x0C000000 is the start of MSM, size is 2M
var SHAREDMEM_0           = 0x0C000000;
var SHAREDMEMSIZE_0       = 0x00200000;

SharedRegion.setEntryMeta(0,
    { base: SHAREDMEM_0, 
      len:  SHAREDMEMSIZE_0,
      ownerProcId: 1,
      isValid: true,
      name: "DDR2 RAM haha",
    });    

/* Region 1
*  ¥Ê¥¢…¢…‰µ„–≈œ¢
*/    
var SHAREDMEM_1           = 0x0C200000;	//From the end of Region0
var SHAREDMEMSIZE_1       = 0x00004400;	//17K

 SharedRegion.setEntryMeta(1,
{ base: SHAREDMEM_1, 
  len:  SHAREDMEMSIZE_1,
  ownerProcId: 1,
  isValid: true,
  name: "DDR2 RAM",
});  

//----------------------------------------------------------------------------

/*
** Create a Heap. 
*/
//var HeapMem = xdc.useModule('ti.sysbios.heaps.HeapMem');
//var heapMemParams = new HeapMem.Params();
//heapMemParams.size = 0x300000;
//heapMemParams.sectionName = "systemHeapCaore1";
//Program.global.heap1 = HeapMem.create(heapMemParams);

/* This is the default memory heap. */
//Memory.defaultHeapInstance  =   Program.global.heap1;
